'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * Extends a DOM `selection` to a given `el` and `offset`.
 *
 * COMPAT: In IE11, `selection.extend` doesn't exist natively, so we have to
 * polyfill it with this. (2017/09/06)
 *
 * https://gist.github.com/tyler-johnson/0a3e8818de3f115b2a2dc47468ac0099
 *
 * @param {Selection} selection
 * @param {Element} el
 * @param {Number} offset
 * @return {Selection}
 */

function extendSelection(selection, el, offset) {
  // Use native method whenever possible.
  if (typeof selection.extend === 'function') {
    return selection.extend(el, offset);
  }

  var range = document.createRange();
  var anchor = document.createRange();
  var focus = document.createRange();
  anchor.setStart(selection.anchorNode, selection.anchorOffset);
  focus.setStart(el, offset);

  var v = focus.compareBoundaryPoints(Range.START_TO_START, anchor);

  // If the focus is after the anchor...
  if (v >= 0) {
    range.setStart(selection.anchorNode, selection.anchorOffset);
    range.setEnd(el, offset);
  }

  // Otherwise, if the anchor if after the focus...
  else {
      range.setStart(el, offset);
      range.setEnd(selection.anchorNode, selection.anchorOffset);
    }

  selection.removeAllRanges();
  selection.addRange(range);
  return selection;
}

/**
 * Export.
 *
 * @type {Function}
 */

exports.default = extendSelection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9leHRlbmQtc2VsZWN0aW9uLmpzIl0sIm5hbWVzIjpbImV4dGVuZFNlbGVjdGlvbiIsInNlbGVjdGlvbiIsImVsIiwib2Zmc2V0IiwiZXh0ZW5kIiwicmFuZ2UiLCJkb2N1bWVudCIsImNyZWF0ZVJhbmdlIiwiYW5jaG9yIiwiZm9jdXMiLCJzZXRTdGFydCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJ2IiwiY29tcGFyZUJvdW5kYXJ5UG9pbnRzIiwiUmFuZ2UiLCJTVEFSVF9UT19TVEFSVCIsInNldEVuZCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7QUFjQSxTQUFTQSxlQUFULENBQXlCQyxTQUF6QixFQUFvQ0MsRUFBcEMsRUFBd0NDLE1BQXhDLEVBQWdEO0FBQzlDO0FBQ0EsTUFBSSxPQUFPRixVQUFVRyxNQUFqQixLQUE0QixVQUFoQyxFQUE0QztBQUMxQyxXQUFPSCxVQUFVRyxNQUFWLENBQWlCRixFQUFqQixFQUFxQkMsTUFBckIsQ0FBUDtBQUNEOztBQUVELE1BQU1FLFFBQVFDLFNBQVNDLFdBQVQsRUFBZDtBQUNBLE1BQU1DLFNBQVNGLFNBQVNDLFdBQVQsRUFBZjtBQUNBLE1BQU1FLFFBQVFILFNBQVNDLFdBQVQsRUFBZDtBQUNBQyxTQUFPRSxRQUFQLENBQWdCVCxVQUFVVSxVQUExQixFQUFzQ1YsVUFBVVcsWUFBaEQ7QUFDQUgsUUFBTUMsUUFBTixDQUFlUixFQUFmLEVBQW1CQyxNQUFuQjs7QUFFQSxNQUFNVSxJQUFJSixNQUFNSyxxQkFBTixDQUE0QkMsTUFBTUMsY0FBbEMsRUFBa0RSLE1BQWxELENBQVY7O0FBRUE7QUFDQSxNQUFJSyxLQUFLLENBQVQsRUFBWTtBQUNWUixVQUFNSyxRQUFOLENBQWVULFVBQVVVLFVBQXpCLEVBQXFDVixVQUFVVyxZQUEvQztBQUNBUCxVQUFNWSxNQUFOLENBQWFmLEVBQWIsRUFBaUJDLE1BQWpCO0FBQ0Q7O0FBRUQ7QUFMQSxPQU1LO0FBQ0hFLFlBQU1LLFFBQU4sQ0FBZVIsRUFBZixFQUFtQkMsTUFBbkI7QUFDQUUsWUFBTVksTUFBTixDQUFhaEIsVUFBVVUsVUFBdkIsRUFBbUNWLFVBQVVXLFlBQTdDO0FBQ0Q7O0FBRURYLFlBQVVpQixlQUFWO0FBQ0FqQixZQUFVa0IsUUFBVixDQUFtQmQsS0FBbkI7QUFDQSxTQUFPSixTQUFQO0FBQ0Q7O0FBRUQ7Ozs7OztrQkFNZUQsZSIsImZpbGUiOiJleHRlbmQtc2VsZWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEV4dGVuZHMgYSBET00gYHNlbGVjdGlvbmAgdG8gYSBnaXZlbiBgZWxgIGFuZCBgb2Zmc2V0YC5cbiAqXG4gKiBDT01QQVQ6IEluIElFMTEsIGBzZWxlY3Rpb24uZXh0ZW5kYCBkb2Vzbid0IGV4aXN0IG5hdGl2ZWx5LCBzbyB3ZSBoYXZlIHRvXG4gKiBwb2x5ZmlsbCBpdCB3aXRoIHRoaXMuICgyMDE3LzA5LzA2KVxuICpcbiAqIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3R5bGVyLWpvaG5zb24vMGEzZTg4MThkZTNmMTE1YjJhMmRjNDc0NjhhYzAwOTlcbiAqXG4gKiBAcGFyYW0ge1NlbGVjdGlvbn0gc2VsZWN0aW9uXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHtTZWxlY3Rpb259XG4gKi9cblxuZnVuY3Rpb24gZXh0ZW5kU2VsZWN0aW9uKHNlbGVjdGlvbiwgZWwsIG9mZnNldCkge1xuICAvLyBVc2UgbmF0aXZlIG1ldGhvZCB3aGVuZXZlciBwb3NzaWJsZS5cbiAgaWYgKHR5cGVvZiBzZWxlY3Rpb24uZXh0ZW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvbi5leHRlbmQoZWwsIG9mZnNldClcbiAgfVxuXG4gIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKVxuICBjb25zdCBhbmNob3IgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpXG4gIGNvbnN0IGZvY3VzID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKVxuICBhbmNob3Iuc2V0U3RhcnQoc2VsZWN0aW9uLmFuY2hvck5vZGUsIHNlbGVjdGlvbi5hbmNob3JPZmZzZXQpXG4gIGZvY3VzLnNldFN0YXJ0KGVsLCBvZmZzZXQpXG5cbiAgY29uc3QgdiA9IGZvY3VzLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhSYW5nZS5TVEFSVF9UT19TVEFSVCwgYW5jaG9yKVxuXG4gIC8vIElmIHRoZSBmb2N1cyBpcyBhZnRlciB0aGUgYW5jaG9yLi4uXG4gIGlmICh2ID49IDApIHtcbiAgICByYW5nZS5zZXRTdGFydChzZWxlY3Rpb24uYW5jaG9yTm9kZSwgc2VsZWN0aW9uLmFuY2hvck9mZnNldClcbiAgICByYW5nZS5zZXRFbmQoZWwsIG9mZnNldClcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgaWYgdGhlIGFuY2hvciBpZiBhZnRlciB0aGUgZm9jdXMuLi5cbiAgZWxzZSB7XG4gICAgcmFuZ2Uuc2V0U3RhcnQoZWwsIG9mZnNldClcbiAgICByYW5nZS5zZXRFbmQoc2VsZWN0aW9uLmFuY2hvck5vZGUsIHNlbGVjdGlvbi5hbmNob3JPZmZzZXQpXG4gIH1cblxuICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKClcbiAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKVxuICByZXR1cm4gc2VsZWN0aW9uXG59XG5cbi8qKlxuICogRXhwb3J0LlxuICpcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbmRTZWxlY3Rpb25cbiJdfQ==