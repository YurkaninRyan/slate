'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _offsetKey = require('./offset-key');

var _offsetKey2 = _interopRequireDefault(_offsetKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Get a point from a native selection's DOM `element` and `offset`.
 *
 * @param {Element} element
 * @param {Number} offset
 * @param {State} state
 * @param {Editor} editor
 * @return {Object}
 */

function getPoint(element, offset, state, editor) {
  var document = state.document;

  var schema = editor.getSchema();

  // If we can't find an offset key, we can't get a point.
  var offsetKey = _offsetKey2.default.findKey(element, offset);
  if (!offsetKey) return null;

  // COMPAT: If someone is clicking from one Slate editor into another, the
  // select event fires two, once for the old editor's `element` first, and
  // then afterwards for the correct `element`. (2017/03/03)
  var key = offsetKey.key;

  var node = document.getDescendant(key);
  if (!node) return null;

  var decorators = document.getDescendantDecorators(key, schema);
  var ranges = node.getRanges(decorators);
  var point = _offsetKey2.default.findPoint(offsetKey, ranges);
  return point;
}

/**
 * Export.
 *
 * @type {Function}
 */

exports.default = getPoint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9nZXQtcG9pbnQuanMiXSwibmFtZXMiOlsiZ2V0UG9pbnQiLCJlbGVtZW50Iiwib2Zmc2V0Iiwic3RhdGUiLCJlZGl0b3IiLCJkb2N1bWVudCIsInNjaGVtYSIsImdldFNjaGVtYSIsIm9mZnNldEtleSIsImZpbmRLZXkiLCJrZXkiLCJub2RlIiwiZ2V0RGVzY2VuZGFudCIsImRlY29yYXRvcnMiLCJnZXREZXNjZW5kYW50RGVjb3JhdG9ycyIsInJhbmdlcyIsImdldFJhbmdlcyIsInBvaW50IiwiZmluZFBvaW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7Ozs7O0FBRUE7Ozs7Ozs7Ozs7QUFVQSxTQUFTQSxRQUFULENBQWtCQyxPQUFsQixFQUEyQkMsTUFBM0IsRUFBbUNDLEtBQW5DLEVBQTBDQyxNQUExQyxFQUFrRDtBQUFBLE1BQ3hDQyxRQUR3QyxHQUMzQkYsS0FEMkIsQ0FDeENFLFFBRHdDOztBQUVoRCxNQUFNQyxTQUFTRixPQUFPRyxTQUFQLEVBQWY7O0FBRUE7QUFDQSxNQUFNQyxZQUFZLG9CQUFVQyxPQUFWLENBQWtCUixPQUFsQixFQUEyQkMsTUFBM0IsQ0FBbEI7QUFDQSxNQUFJLENBQUNNLFNBQUwsRUFBZ0IsT0FBTyxJQUFQOztBQUVoQjtBQUNBO0FBQ0E7QUFWZ0QsTUFXeENFLEdBWHdDLEdBV2hDRixTQVhnQyxDQVd4Q0UsR0FYd0M7O0FBWWhELE1BQU1DLE9BQU9OLFNBQVNPLGFBQVQsQ0FBdUJGLEdBQXZCLENBQWI7QUFDQSxNQUFJLENBQUNDLElBQUwsRUFBVyxPQUFPLElBQVA7O0FBRVgsTUFBTUUsYUFBYVIsU0FBU1MsdUJBQVQsQ0FBaUNKLEdBQWpDLEVBQXNDSixNQUF0QyxDQUFuQjtBQUNBLE1BQU1TLFNBQVNKLEtBQUtLLFNBQUwsQ0FBZUgsVUFBZixDQUFmO0FBQ0EsTUFBTUksUUFBUSxvQkFBVUMsU0FBVixDQUFvQlYsU0FBcEIsRUFBK0JPLE1BQS9CLENBQWQ7QUFDQSxTQUFPRSxLQUFQO0FBQ0Q7O0FBRUQ7Ozs7OztrQkFNZWpCLFEiLCJmaWxlIjoiZ2V0LXBvaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgT2Zmc2V0S2V5IGZyb20gJy4vb2Zmc2V0LWtleSdcblxuLyoqXG4gKiBHZXQgYSBwb2ludCBmcm9tIGEgbmF0aXZlIHNlbGVjdGlvbidzIERPTSBgZWxlbWVudGAgYW5kIGBvZmZzZXRgLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldFxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqIEBwYXJhbSB7RWRpdG9yfSBlZGl0b3JcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBnZXRQb2ludChlbGVtZW50LCBvZmZzZXQsIHN0YXRlLCBlZGl0b3IpIHtcbiAgY29uc3QgeyBkb2N1bWVudCB9ID0gc3RhdGVcbiAgY29uc3Qgc2NoZW1hID0gZWRpdG9yLmdldFNjaGVtYSgpXG5cbiAgLy8gSWYgd2UgY2FuJ3QgZmluZCBhbiBvZmZzZXQga2V5LCB3ZSBjYW4ndCBnZXQgYSBwb2ludC5cbiAgY29uc3Qgb2Zmc2V0S2V5ID0gT2Zmc2V0S2V5LmZpbmRLZXkoZWxlbWVudCwgb2Zmc2V0KVxuICBpZiAoIW9mZnNldEtleSkgcmV0dXJuIG51bGxcblxuICAvLyBDT01QQVQ6IElmIHNvbWVvbmUgaXMgY2xpY2tpbmcgZnJvbSBvbmUgU2xhdGUgZWRpdG9yIGludG8gYW5vdGhlciwgdGhlXG4gIC8vIHNlbGVjdCBldmVudCBmaXJlcyB0d28sIG9uY2UgZm9yIHRoZSBvbGQgZWRpdG9yJ3MgYGVsZW1lbnRgIGZpcnN0LCBhbmRcbiAgLy8gdGhlbiBhZnRlcndhcmRzIGZvciB0aGUgY29ycmVjdCBgZWxlbWVudGAuICgyMDE3LzAzLzAzKVxuICBjb25zdCB7IGtleSB9ID0gb2Zmc2V0S2V5XG4gIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5nZXREZXNjZW5kYW50KGtleSlcbiAgaWYgKCFub2RlKSByZXR1cm4gbnVsbFxuXG4gIGNvbnN0IGRlY29yYXRvcnMgPSBkb2N1bWVudC5nZXREZXNjZW5kYW50RGVjb3JhdG9ycyhrZXksIHNjaGVtYSlcbiAgY29uc3QgcmFuZ2VzID0gbm9kZS5nZXRSYW5nZXMoZGVjb3JhdG9ycylcbiAgY29uc3QgcG9pbnQgPSBPZmZzZXRLZXkuZmluZFBvaW50KG9mZnNldEtleSwgcmFuZ2VzKVxuICByZXR1cm4gcG9pbnRcbn1cblxuLyoqXG4gKiBFeHBvcnQuXG4gKlxuICogQHR5cGUge0Z1bmN0aW9ufVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGdldFBvaW50XG4iXX0=